----------------------------------------------------------------------------------
-- Company: 
-- Author: 	Mirko Gagliardi
-- 
-- Create Date:    11/05/2015
-- Design Name: 
-- Module Name:    Issue - rtl 
-- Project Name: 	 Streaming Multiprocessor	
-- Target Devices: 
-- Tool versions: 
-- Description: 
--
-- Dependencies: 	 
--
-- Revision: v 2.3
-- Revision 0.01 - File Created
-- Additional Comments: 
--
----------------------------------------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

library work;
use work.fpupack.all;

entity Issue is
	Port(
			clk   : in std_logic;
			reset : in std_logic;
			enable: in std_logic;
			enWr  : in std_logic;
 			OpIn  : in queue_type;
			Nop   : out std_logic;
			OpOut : out std_logic_vector(SEL_NUM-1 downto 0)
		);	
end entity;

architecture rtl of Issue is	
	
	component IndexSelector 
		Generic (
				N : integer := IND_SEL_DIM;
				M : integer := OP_QUEUE_IND
		);
		Port(
			 NopVect  : in std_logic_vector(N-1 downto 0);
			 GrantIn  : in ind_sel_in_type;
			 counter  : in integer;
			 Nop		 : out std_logic;
			 CheckOut : out std_logic_vector(M-1 downto 0)
		);
	end component;
	
	component counter
		Generic(
			N : natural := 4;
			M : natural := 2
		);
		Port(
			clk	  : in std_logic;
			reset	  : in std_logic;
			enable  : in std_logic;
			count_mod   : out integer
		);
	end component;
	
	COMPONENT StructHazardCheck
		Port(
			clk 	: in std_logic;
			reset : in std_logic;
			en    : in std_logic;
			op	   : in std_logic_vector (SEL_NUM-1 DOWNTO 0);
			Ind   : in std_logic_vector(OP_QUEUE_IND-1 downto 0);
			MuxCollVector : in std_logic_vector (MAX_LATENCY-1 downto 0);
			AdderCollVect : in std_logic_vector (MULT_LAT_S downto 0);
			IndOut : out std_logic_vector(OP_QUEUE_IND-1 downto 0);
			GrantedOut : out std_logic
		);
	END COMPONENT;
	
	COMPONENT UpdateVect
		Port(
				clk   : in std_logic;
				reset : in std_logic;
				en    : in std_logic;
				MuxCollVector_in : in std_logic_vector (MAX_LATENCY-1 downto 0);
				AdderCollVect_in : in  std_logic_vector (MULT_LAT_S downto 0);
				LastOp : in std_logic_vector(SEL_NUM-1 downto 0);
				MuxCollVector_out : out std_logic_vector (MAX_LATENCY-1 downto 0);
				AdderCollVect_out : out  std_logic_vector (MULT_LAT_S downto 0)
			);	
	END COMPONENT;
		
	signal op_queue : queue_type := (others => (others => '0'));
	signal check_out : std_logic_vector (OP_QUEUE_IND-1 downto 0) := (others => '0');
	signal MuxCollVector_new, MuxCollVector_old : std_logic_vector (MAX_LATENCY-1 downto 0) := (others => '0');
	signal AdderCollVect_new, AdderCollVect_old : std_logic_vector (MULT_LAT_S downto 0) := (others => '0');
	signal LastOp : std_logic_vector(SEL_NUM-1 downto 0) := (others => '0');
	
	signal NopVect : std_logic_vector (NUM_OP_CHECK-1 downto 0) := (others => '0');
	
	signal nop_in_vect : std_logic_vector(2*IND_SEL_BLOCK_NUM-1 downto 0) := (others => '0');
	signal counter_array : integer_array_counter := (others => 0);
	signal index_counter : integer_array_indsel := (others => 0);
	signal indsel_out_temp : ind_sel_out_type := (others => (others => '0'));
	signal nop_out_vect : std_logic_vector(IND_SEL_BLOCK_NUM-1 downto 0) := (others => '0');
	signal grant_in : ind_sel_in_type_array := (others => (others => (others => '0')));
	
	signal ind_in : op_queue_in_type := (others => (others => '0'));
	signal reg_out : std_logic_vector(OP_QUEUE_IND-1 downto 0) := (others => '0');
	signal nop_reg : std_logic_vector(2**OP_QUEUE_IND-1 downto 0) := (others => '0');

begin
		
	process(clk)	
	begin
		if rising_edge(clk) then
			op_queue <= OpIn;
			OpOut <= op_queue(conv_integer(check_out));
		end if;
	end process;
	
	MuxCollVector_new <= MuxCollVector_old;
	AdderCollVect_new <= AdderCollVect_old;
	LastOp <= op_queue(conv_integer(check_out));

	index_counter <= int_assign(counter_array, OP_QUEUE_IND, IND_SEL_BLOCK_NUM);
	nop_in_vect(2*IND_SEL_BLOCK_NUM-1 downto IND_SEL_BLOCK_NUM-1) <= nop_reg;
	nop_in_vect(IND_SEL_BLOCK_NUM-2 downto 0) <= nop_out_vect(IND_SEL_BLOCK_NUM-1 downto 1);
	Nop <= nop_out_vect(0);
	grant_in <= grant_assign(ind_in, indsel_out_temp, 2**OP_QUEUE_IND / 2, IND_SEL_BLOCK_NUM);
	check_out <= indsel_out_temp(0);
	
	Counter_Gen: for i in OP_QUEUE_IND-1 downto 0 generate
      CounterX : counter 		
			GENERIC MAP(
				N => 2**(OP_QUEUE_IND-1 - i),
				M => IND_SEL_DIM
			)
			PORT MAP(
				clk => clk,
				reset => reset,
				enable => enable,
				count_mod => counter_array(i)
			);
   end generate Counter_Gen;

	IndexSelector_Gen: for i in IND_SEL_BLOCK_NUM-1 downto 0 generate
      IndSelX : IndexSelector PORT MAP(
			NopVect => nop_in_vect(2*i+1 downto 2*i),
			counter => index_counter(i),
			GrantIn => grant_in(i),
			Nop => nop_out_vect(i),
			CheckOut => indsel_out_temp(i)
		);
   end generate IndexSelector_Gen;	
			
	StructHazardGen: for i in 2**OP_QUEUE_IND-1 downto 0 generate
	   StructHazardCheckX : StructHazardCheck PORT MAP(
				clk => clk, 
				reset => reset, 
				en => enable,
				Ind =>  conv_std_logic_vector(i, OP_QUEUE_IND),
				MuxCollVector => MuxCollVector_new,
				AdderCollVect => AdderCollVect_new,
				op => op_queue(i), 
				IndOut => ind_in(i),
				GrantedOut => nop_reg(i)
			);
	end generate StructHazardGen;
	
	UpdateVect_inst : UpdateVect PORT MAP(
				clk => clk,
				reset => reset,
				en => enable,
				MuxCollVector_in => MuxCollVector_new,
				AdderCollVect_in => AdderCollVect_new,
				LastOp => LastOp,
				MuxCollVector_out => MuxCollVector_old,
				AdderCollVect_out=> AdderCollVect_old
		);

end rtl;
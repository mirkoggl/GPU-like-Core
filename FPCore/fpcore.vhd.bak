library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity fpcore is
	PORT(
		aclr		   : IN std_logic;
		clk_en		: IN std_logic;
		clk	   	: IN std_logic;
		data_in1		: IN std_logic_vector (31 DOWNTO 0);
		data_in2		: IN std_logic_vector (31 DOWNTO 0);
		data_in3		: IN std_logic_vector (31 DOWNTO 0);
		en_add_in, en_mult_in, en_fma_in : IN std_logic;
		sel_mux_in  : IN std_logic_vector (2 downto 0);
		nan		   : OUT std_logic;
		overflow		: OUT std_logic;
		data_out		: OUT std_logic_vector (31 DOWNTO 0);
		underflow   : OUT std_logic;
		zero		   : OUT std_logic 
	);
end entity;

architecture rtl of fpcore is

COMPONENT registro_n_bit
	 Generic (N : natural:=4);
    Port ( value_in : in  STD_LOGIC_VECTOR (N-1 downto 0);
           clk : in  STD_LOGIC;
           reset : in  STD_LOGIC;
           en : in  STD_LOGIC;
           value_out : out  STD_LOGIC_VECTOR (N-1 downto 0));
END COMPONENT;

COMPONENT mux
   port(
      a, b, c : in std_logic_vector (31 downto 0); 
      Sel : in std_logic_vector(2 downto 0);
      Output : out std_logic_vector (31 downto 0)
   );
END COMPONENT;

COMPONENT mux_2to1
   port(
      a, b: in std_logic_vector (31 downto 0); 
      sel : in std_logic;
      y : out std_logic_vector (31 downto 0)
   );
END COMPONENT;

COMPONENT fp_addsub
	PORT(
		aclr		: IN STD_LOGIC ;
		clk_en		: IN STD_LOGIC ;
		clock		: IN STD_LOGIC ;
		dataa		: IN STD_LOGIC_VECTOR (31 DOWNTO 0);
		datab		: IN STD_LOGIC_VECTOR (31 DOWNTO 0);
		nan		: OUT STD_LOGIC ;
		overflow		: OUT STD_LOGIC ;
		result		: OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
		underflow		: OUT STD_LOGIC ;
		zero		: OUT STD_LOGIC 
	);
END COMPONENT;

COMPONENT fp_mult
	PORT(
		aclr		: IN STD_LOGIC ;
		clk_en		: IN STD_LOGIC ;
		clock		: IN STD_LOGIC ;
		dataa		: IN STD_LOGIC_VECTOR (31 DOWNTO 0);
		datab		: IN STD_LOGIC_VECTOR (31 DOWNTO 0);
		nan		: OUT STD_LOGIC ;
		overflow		: OUT STD_LOGIC ;
		result		: OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
		underflow		: OUT STD_LOGIC ;
		zero		: OUT STD_LOGIC 
	);
END COMPONENT;

signal en_add, en_mult, en_fma : std_logic := '0'; 
signal add_in1, add_in2, mult_in1, mult_in2 : std_logic_vector (31 downto 0) := (others => '0');
signal add_out, mult_out, div_out, mux_out : std_logic_vector (31 downto 0);
signal sel_mux : std_logic_vector (2 downto 0) := (others =>'0');
signal add_mux_in1, add_mux_in2 : std_logic_vector (31 downto 0) := (others => '0');
begin

	sel_mux <= sel_mux_in;
	en_add <= en_add_in;
	en_mult <= en_mult_in;
	en_fma <= en_fma_in;

	add_in1_reg : registro_n_bit 
		GENERIC MAP(32)
		PORT MAP (add_mux_in1, clk, aclr, en_add, add_in1);
	add_in2_reg : registro_n_bit 
		GENERIC MAP(32)
		PORT MAP (add_mux_in2, clk, aclr, en_add, add_in2);
		
	mux_2to1_add_in1 : mux_2to1 PORT MAP(data_in1, mult_out, en_fma, add_mux_in1);
	mux_2to1_add_in2 : mux_2to1 PORT MAP(data_in2, data_in3, en_fma, add_mux_in2);

	fp_addsub_inst : fp_addsub PORT MAP (
			aclr	 => aclr,
			clk_en	 => clk_en,
			clock	 => clk,
			dataa	 => add_in1,
			datab	 => add_in2,
			nan	 => open,
			overflow	 => open,
			result	 => add_out,
			underflow	 => open,
			zero	 => open
		);
	
	mult_in1_reg : registro_n_bit 
		GENERIC MAP(32)
		PORT MAP (data_in1, clk, aclr, en_mult, mult_in1);
	mult_in2_reg : registro_n_bit 
		GENERIC MAP(32)
		PORT MAP (data_in2, clk, aclr, en_mult, mult_in2);
	
	fp_mult_inst : fp_mult PORT MAP (
			aclr	 => aclr,
			clk_en	 => clk_en,
			clock	 => clk,
			dataa	 => mult_in1,
			datab	 => mult_in2,
			nan	 => open,
			overflow	 => open,
			result	 => mult_out,
			underflow	 => open,
			zero	 => open
		);
	
	mux_3to1 : mux PORT MAP (add_out, mult_out, div_out, sel_mux, mux_out);
	
	data_out <= mux_out;

end rtl;
